; ModuleID = 'myMila'
source_filename = "myMila"

@0 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@n = common global i32 0, align 4

declare i32 @printf(i8*, ...)

declare i32 @scanf(i8*, ...)

define i32 @main() {
mainBlock:
  %0 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0), i32* %n1)
  %n = load i32, i32* %n1, align 4
  %1 = call i32 @fact(i32 %n)
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0), i32 %1)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  ret i32 0
}

define i32 @fact(i32 %n) {
"procedure fact block":
  %n1 = alloca i32, i32 0, align 4
  %fact = alloca i32, i32 0, align 4
  store i32 %n, i32* %n1, align 4
  %n2 = load i32, i32* %n1, align 4
  %0 = icmp eq i32 %n2, 0
  %1 = sext i1 %0 to i32
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %"procedure fact block"
  store i32 1, i32* %fact, align 4
  br label %mergeIf

else:                                             ; preds = %"procedure fact block"
  %n3 = load i32, i32* %n1, align 4
  %n4 = load i32, i32* %n1, align 4
  %3 = sub i32 %n4, 1
  %4 = call i32 @fact(i32 %3)
  %5 = mul i32 %n3, %4
  store i32 %5, i32* %fact, align 4
  br label %mergeIf

mergeIf:                                          ; preds = %else, %then
  %6 = load i32, i32* %fact, align 4
  ret i32 %6
}
